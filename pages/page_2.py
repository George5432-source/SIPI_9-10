
import streamlit as st
import pandas as pd
import sqlite3
import os

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
COLUMNS = ["price", "level", "levels", "rooms", "area", "kitchen_area"]
OPERATORS = {
    "=": lambda df, col, val: df[col] == val,
    ">": lambda df, col, val: df[col] > val,
    "<": lambda df, col, val: df[col] < val,
    ">=": lambda df, col, val: df[col] >= val,
    "<=": lambda df, col, val: df[col] <= val,
}

# --- –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
DB_PATH = os.path.join("D:/6-–æ–π —Å–µ–º/–ü–æ—Ä–≥–ö—Ä–∏–Ω–∂", "flats.db")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π ---
def load_filtered_data(query: str, params: list):
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql_query(query, conn, params=params)
    conn.close()
    return df

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ª–æ–≤–∏–π ---
if "conditions" not in st.session_state:
    st.session_state.conditions = []

st.title("–§–∏–ª—å—Ç—Ä –∫–≤–∞—Ä—Ç–∏—Ä")
st.subheader("–î–æ–±–∞–≤—å—Ç–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

# --- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è–º–∏ ---
button_col1, button_col2, button_col3 = st.columns(3)

with button_col1:
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ"):
        st.session_state.conditions.append(("price", ">", 0.0))

with button_col2:
    if st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å —É—Å–ª–æ–≤–∏—è"):
        st.session_state.conditions.clear()

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π ---
for i, cond in enumerate(st.session_state.conditions):
    with st.expander(f"{cond[0]} {cond[1]} {cond[2]}"):
        with st.form(f"form_{i}"):
            col1, col2, col3 = st.columns(3)
            with col1:
                field = st.selectbox("–ü–æ–ª–µ", COLUMNS, index=COLUMNS.index(cond[0]), key=f"field_{i}")
            with col2:
                op = st.selectbox("–û–ø–µ—Ä–∞—Ç–æ—Ä", list(OPERATORS.keys()), index=list(OPERATORS.keys()).index(cond[1]), key=f"op_{i}")
            with col3:
                value = st.number_input("–ó–Ω–∞—á–µ–Ω–∏–µ", value=float(cond[2]), key=f"value_{i}")

            save_col, delete_col = st.columns(2)
            with save_col:
                if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                    st.session_state.conditions[i] = (field, op, value)
            with delete_col:
                if st.form_submit_button("‚ùå –£–¥–∞–ª–∏—Ç—å"):
                    st.session_state.conditions.pop(i)

# --- –ü–æ–∏—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—è–º ---
with button_col3:
    filter = st.button("üîç –ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã")

if filter:
        query = "SELECT * FROM flats WHERE 1=1"
        params = []

        for field, op, value in st.session_state.conditions:
            query += f" AND {field} {op} ?"
            params.append(value)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
        limit = st.number_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", min_value=1, value=10, step=1)

        try:
            filtered_df = load_filtered_data(query, params)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç
            filtered_df = filtered_df.head(limit)
            st.subheader(f"–ù–∞–π–¥–µ–Ω–æ –∫–≤–∞—Ä—Ç–∏—Ä: {len(filtered_df)}")
            st.dataframe(filtered_df, use_container_width=True)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")

