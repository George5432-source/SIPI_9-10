import os
from streamlit.testing.v1 import AppTest

def get_page1_app():
    path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "pages", "page1.py"))
    at = AppTest.from_file(path)
    at.run()
    return at

def test_input_values_set_correctly():
    at = get_page1_app()
    at.number_input[0].set_value(3)
    at.number_input[1].set_value(10)
    at.number_input[2].set_value(2)
    at.number_input[3].set_value(45.0)
    at.number_input[4].set_value(10.0)

    assert at.number_input[0].value == 3
    assert at.number_input[1].value == 10
    assert at.number_input[2].value == 2
    assert at.number_input[3].value == 45.0
    assert at.number_input[4].value == 10.0

def test_model_prediction_output():
    at = get_page1_app()
    at.number_input[0].set_value(3)
    at.number_input[1].set_value(10)
    at.number_input[2].set_value(2)
    at.number_input[3].set_value(45.0)
    at.number_input[4].set_value(10.0)

    for btn in at.button:
        if "üîç" in btn.label:
            btn.click()
            break

    at.run()
    expected_price = "üí∞ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: **5 960 000 —Ä—É–±–ª–µ–π**"
    assert any(success.value.strip() == expected_price for success in at.success), \
        f"–û–∂–∏–¥–∞–ª–∏: {expected_price}, –Ω–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ success-—ç–ª–µ–º–µ–Ω—Ç–∞—Ö"

def test_model_accuracy_output():
    at = get_page1_app()
    at.number_input[0].set_value(3)
    at.number_input[1].set_value(10)
    at.number_input[2].set_value(2)
    at.number_input[3].set_value(45.0)
    at.number_input[4].set_value(10.0)

    for btn in at.button:
        if "üîç" in btn.label:
            btn.click()
            break

    at.run()
    expected_accuracy = "‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å: R¬≤ = 0.87 (–Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ)"
    assert any(info.value.strip() == expected_accuracy for info in at.info), \
        f"–û–∂–∏–¥–∞–ª–∏: {expected_accuracy}, –Ω–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ info-—ç–ª–µ–º–µ–Ω—Ç–∞—Ö"

def test_model_name_output():
    at = get_page1_app()
    at.number_input[0].set_value(3)
    at.number_input[1].set_value(10)
    at.number_input[2].set_value(2)
    at.number_input[3].set_value(45.0)
    at.number_input[4].set_value(10.0)

    for btn in at.button:
        if "üîç" in btn.label:
            btn.click()
            break

    at.run()
    assert any(info.value.strip() == "üìà –ú–æ–¥–µ–ª—å: LightGBM Regressor v1.0" for info in at.info), \
        "–û–∂–∏–¥–∞–ª–∏ –≤—ã–≤–æ–¥ –º–æ–¥–µ–ª–∏ 'LightGBM Regressor v1.0', –Ω–æ –Ω–µ –Ω–∞—à–ª–∏"



def test_page3_distribution_plots():
    path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "pages", "page3.py"))
    at = AppTest.from_file(path)
    at.run()

    expected_subheaders = [
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞:",
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º",
    ]

    found_texts = [el.value for el in at.subheader]

    for expected in expected_subheaders:
        assert any(expected in text for text in found_texts), f"–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ '{expected}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
